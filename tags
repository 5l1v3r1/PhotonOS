!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALL_OUR_OBJS	kernel/Makefile	/^ALL_OUR_OBJS:=\\$/;"	m
ARCHDIR	kernel/Makefile	/^ARCHDIR:=arch\/$(HOSTARCH)$/;"	m
ARCHDIR	libc/Makefile	/^ARCHDIR:=arch\/$(HOSTARCH)$/;"	m
ASSERT	libc/include/stdlib.h	12;"	d
ASSERT	sysroot/usr/include/stdlib.h	12;"	d
ATEXIT_MAX_FUNCS	kernel/include/icxxabi.h	4;"	d
ATEXIT_MAX_FUNCS	sysroot/usr/include/icxxabi.h	4;"	d
Author	kernel/include/system.h	12;"	d
Author	sysroot/usr/include/system.h	12;"	d
BACKSPACE	kernel/include/keyboard.h	20;"	d
BACKSPACE	sysroot/usr/include/keyboard.h	20;"	d
BINARIES	libc/Makefile	/^BINARIES=libg.a libk.a $(ARCHDIR)\/crt0.o $(ARCHDIR)\/crti.o $(ARCHDIR)\/crtn.o # add libc.a when user space is ready$/;"	m
BOOTDIR	kernel/Makefile	/^BOOTDIR?=$(EXEC_PREFIX)\/boot$/;"	m
CFLAGS	kernel/Makefile	/^CFLAGS:=$(CFLAGS) $(KERNEL_ARCH_CFLAGS)$/;"	m
CFLAGS	kernel/Makefile	/^CFLAGS:=$(CFLAGS) -ffreestanding -Wall -Wextra$/;"	m
CFLAGS	kernel/Makefile	/^CFLAGS?=-O2 -g$/;"	m
CFLAGS	libc/Makefile	/^CFLAGS:=$(CFLAGS) $(ARCH_CFLAGS)$/;"	m
CFLAGS	libc/Makefile	/^CFLAGS:=$(CFLAGS) -Wall -Wextra$/;"	m
CFLAGS	libc/Makefile	/^CFLAGS?=-O2 -g$/;"	m
CHECKSUM	kernel/arch/i386/boot/boot.asm	/^CHECKSUM    equ -(MAGIC + FLAGS)        $/;"	d
COLOR_BLACK	kernel/include/vga.h	/^    COLOR_BLACK = 0,$/;"	e	enum:vga_color
COLOR_BLACK	sysroot/usr/include/vga.h	/^    COLOR_BLACK = 0,$/;"	e	enum:vga_color
COLOR_BLUE	kernel/include/vga.h	/^    COLOR_BLUE = 1,$/;"	e	enum:vga_color
COLOR_BLUE	sysroot/usr/include/vga.h	/^    COLOR_BLUE = 1,$/;"	e	enum:vga_color
COLOR_BROWN	kernel/include/vga.h	/^    COLOR_BROWN = 6,$/;"	e	enum:vga_color
COLOR_BROWN	sysroot/usr/include/vga.h	/^    COLOR_BROWN = 6,$/;"	e	enum:vga_color
COLOR_CYAN	kernel/include/vga.h	/^    COLOR_CYAN = 3,$/;"	e	enum:vga_color
COLOR_CYAN	sysroot/usr/include/vga.h	/^    COLOR_CYAN = 3,$/;"	e	enum:vga_color
COLOR_DARK_GREY	kernel/include/vga.h	/^    COLOR_DARK_GREY = 8,$/;"	e	enum:vga_color
COLOR_DARK_GREY	sysroot/usr/include/vga.h	/^    COLOR_DARK_GREY = 8,$/;"	e	enum:vga_color
COLOR_GREEN	kernel/include/vga.h	/^    COLOR_GREEN = 2,$/;"	e	enum:vga_color
COLOR_GREEN	sysroot/usr/include/vga.h	/^    COLOR_GREEN = 2,$/;"	e	enum:vga_color
COLOR_LIGHT_BLUE	kernel/include/vga.h	/^    COLOR_LIGHT_BLUE = 9,$/;"	e	enum:vga_color
COLOR_LIGHT_BLUE	sysroot/usr/include/vga.h	/^    COLOR_LIGHT_BLUE = 9,$/;"	e	enum:vga_color
COLOR_LIGHT_CYAN	kernel/include/vga.h	/^    COLOR_LIGHT_CYAN = 11,$/;"	e	enum:vga_color
COLOR_LIGHT_CYAN	sysroot/usr/include/vga.h	/^    COLOR_LIGHT_CYAN = 11,$/;"	e	enum:vga_color
COLOR_LIGHT_GREEN	kernel/include/vga.h	/^    COLOR_LIGHT_GREEN = 10,$/;"	e	enum:vga_color
COLOR_LIGHT_GREEN	sysroot/usr/include/vga.h	/^    COLOR_LIGHT_GREEN = 10,$/;"	e	enum:vga_color
COLOR_LIGHT_GREY	kernel/include/vga.h	/^    COLOR_LIGHT_GREY = 7,$/;"	e	enum:vga_color
COLOR_LIGHT_GREY	sysroot/usr/include/vga.h	/^    COLOR_LIGHT_GREY = 7,$/;"	e	enum:vga_color
COLOR_LIGHT_MAGENTA	kernel/include/vga.h	/^    COLOR_LIGHT_MAGENTA = 13,$/;"	e	enum:vga_color
COLOR_LIGHT_MAGENTA	sysroot/usr/include/vga.h	/^    COLOR_LIGHT_MAGENTA = 13,$/;"	e	enum:vga_color
COLOR_LIGHT_RED	kernel/include/vga.h	/^    COLOR_LIGHT_RED = 12,$/;"	e	enum:vga_color
COLOR_LIGHT_RED	sysroot/usr/include/vga.h	/^    COLOR_LIGHT_RED = 12,$/;"	e	enum:vga_color
COLOR_MAGENTA	kernel/include/vga.h	/^    COLOR_MAGENTA = 5,$/;"	e	enum:vga_color
COLOR_MAGENTA	sysroot/usr/include/vga.h	/^    COLOR_MAGENTA = 5,$/;"	e	enum:vga_color
COLOR_RED	kernel/include/vga.h	/^    COLOR_RED = 4,$/;"	e	enum:vga_color
COLOR_RED	sysroot/usr/include/vga.h	/^    COLOR_RED = 4,$/;"	e	enum:vga_color
COLOR_WHITE	kernel/include/vga.h	/^    COLOR_WHITE = 15,$/;"	e	enum:vga_color
COLOR_WHITE	sysroot/usr/include/vga.h	/^    COLOR_WHITE = 15,$/;"	e	enum:vga_color
COLOR_YELLOW	kernel/include/vga.h	/^    COLOR_YELLOW = 14,$/;"	e	enum:vga_color
COLOR_YELLOW	sysroot/usr/include/vga.h	/^    COLOR_YELLOW = 14,$/;"	e	enum:vga_color
CPFLAGS	kernel/Makefile	/^CPFLAGS:=$(CPPFLAGS) $(KERNEL_ARCH_CPPFLAGS)$/;"	m
CPFLAGS	libc/Makefile	/^CPFLAGS:=$(CPPFLAGS) $(ARCH_CPPFLAGS)$/;"	m
CPPFLAGS	kernel/Makefile	/^CPPFLAGS:=$(CPPFLAGS) -D__is_photon_kernel -D_TEXTMODE -Iinclude -Iarch\/i386\/include -I..\/libc\/include$/;"	m
CPPFLAGS	kernel/Makefile	/^CPPFLAGS?= $/;"	m
CPPFLAGS	libc/Makefile	/^CPPFLAGS:=$(CPPFLAGS) -D__is_photon_libc -Iinclude$/;"	m
CPPFLAGS	libc/Makefile	/^CPPFLAGS?=$/;"	m
CRTBEGIN_OBJ	kernel/Makefile	/^CRTBEGIN_OBJ:=$(shell $(CC) $(CFLAGS) $(LDFLAGS) -print-file-name=crtbegin.o)$/;"	m
CRTEND_OBJ	kernel/Makefile	/^CRTEND_OBJ:=$(shell $(CC) $(CFLAGS) $(LDFLAGS) -print-file-name=crtend.o)$/;"	m
CRTI_OBJ	kernel/Makefile	/^CRTI_OBJ:=$(ARCHDIR)\/crti.o$/;"	m
CRTN_OBJ	kernel/Makefile	/^CRTN_OBJ:=$(ARCHDIR)\/crtn.o$/;"	m
DESTDIR	kernel/Makefile	/^DESTDIR?=$/;"	m
DESTDIR	libc/Makefile	/^DESTDIR?=$/;"	m
ENTER	kernel/include/keyboard.h	22;"	d
ENTER	sysroot/usr/include/keyboard.h	22;"	d
ESC	kernel/include/keyboard.h	19;"	d
ESC	sysroot/usr/include/keyboard.h	19;"	d
EXEC_PREFIX	kernel/Makefile	/^EXEC_PREFIX?=$(PREFIX)$/;"	m
EXEC_PREFIX	libc/Makefile	/^EXEC_PREFIX?=$(PREFIX)$/;"	m
FLAGS	kernel/arch/i386/boot/boot.asm	/^FLAGS       equ  MBALIGN | MEMINFO   $/;"	d
FRAME_ADDR_FROM_INDEX	kernel/arch/i386/include/pmm.h	29;"	d
FRAME_ADDR_FROM_INDEX	sysroot/usr/include/pmm.h	29;"	d
FRAME_INDEX	kernel/arch/i386/include/pmm.h	27;"	d
FRAME_INDEX	sysroot/usr/include/pmm.h	27;"	d
FRAME_SIZE	kernel/arch/i386/include/pmm.h	26;"	d
FRAME_SIZE	sysroot/usr/include/pmm.h	26;"	d
FREEOBJS	libc/Makefile	/^FREEOBJS:=\\$/;"	m
FREQ	kernel/include/init.h	22;"	d
FREQ	kernel/init/init.c	35;"	d	file:
FREQ	sysroot/usr/include/init.h	22;"	d
HEAP_END	kernel/include/kheap.h	11;"	d
HEAP_END	sysroot/usr/include/kheap.h	11;"	d
HEAP_START	kernel/include/kheap.h	10;"	d
HEAP_START	sysroot/usr/include/kheap.h	10;"	d
HOST	kernel/Makefile	/^HOST?=$(shell ..\/default-host.sh)$/;"	m
HOST	libc/Makefile	/^HOST?=$(shell ..\/default-host.sh)$/;"	m
HOSTARCH	kernel/Makefile	/^HOSTARCH:=$(shell ..\/target-triplet-to-arch.sh $(HOST))$/;"	m
HOSTARCH	libc/Makefile	/^HOSTARCH:=$(shell ..\/target-triplet-to-arch.sh $(HOST))$/;"	m
HOSTEDOBJS	libc/Makefile	/^HOSTEDOBJS:=\\$/;"	m
ID_number	kernel/include/kernel_class.h	/^        int ID_number;$/;"	m	class:KernelClass
ID_number	sysroot/usr/include/kernel_class.h	/^        int ID_number;$/;"	m	class:KernelClass
INCLUDEDIR	kernel/Makefile	/^INCLUDEDIR?=$(PREFIX)\/include$/;"	m
INCLUDEDIR	libc/Makefile	/^INCLUDEDIR?=$(PREFIX)\/include$/;"	m
INDEX_FROM_BIT	kernel/include/system.h	19;"	d
INDEX_FROM_BIT	sysroot/usr/include/system.h	19;"	d
IRQ	kernel/arch/i386/interrupt.asm	/^IRQ   0,    32$/;"	l
IRQ	kernel/arch/i386/interrupt.asm	/^IRQ   1,    33$/;"	l
IRQ	kernel/arch/i386/interrupt.asm	/^IRQ   2,    34$/;"	l
IRQ	kernel/arch/i386/interrupt.asm	/^IRQ   3,    35$/;"	l
IRQ	kernel/arch/i386/interrupt.asm	/^IRQ   4,    36$/;"	l
IRQ	kernel/arch/i386/interrupt.asm	/^IRQ   5,    37$/;"	l
IRQ	kernel/arch/i386/interrupt.asm	/^IRQ   6,    38$/;"	l
IRQ	kernel/arch/i386/interrupt.asm	/^IRQ   7,    39$/;"	l
IRQ	kernel/arch/i386/interrupt.asm	/^IRQ   8,    40$/;"	l
IRQ	kernel/arch/i386/interrupt.asm	/^IRQ   9,    41$/;"	l
IRQ	kernel/arch/i386/interrupt.asm	/^IRQ  10,    42$/;"	l
IRQ	kernel/arch/i386/interrupt.asm	/^IRQ  11,    43$/;"	l
IRQ	kernel/arch/i386/interrupt.asm	/^IRQ  12,    44$/;"	l
IRQ	kernel/arch/i386/interrupt.asm	/^IRQ  13,    45$/;"	l
IRQ	kernel/arch/i386/interrupt.asm	/^IRQ  14,    46$/;"	l
IRQ	kernel/arch/i386/interrupt.asm	/^IRQ  15,    47$/;"	l
IRQ0	kernel/arch/i386/include/handlers.h	70;"	d
IRQ0	sysroot/usr/include/handlers.h	70;"	d
IRQ1	kernel/arch/i386/include/handlers.h	71;"	d
IRQ1	sysroot/usr/include/handlers.h	71;"	d
IRQ10	kernel/arch/i386/include/handlers.h	80;"	d
IRQ10	sysroot/usr/include/handlers.h	80;"	d
IRQ11	kernel/arch/i386/include/handlers.h	81;"	d
IRQ11	sysroot/usr/include/handlers.h	81;"	d
IRQ12	kernel/arch/i386/include/handlers.h	82;"	d
IRQ12	sysroot/usr/include/handlers.h	82;"	d
IRQ13	kernel/arch/i386/include/handlers.h	83;"	d
IRQ13	sysroot/usr/include/handlers.h	83;"	d
IRQ14	kernel/arch/i386/include/handlers.h	84;"	d
IRQ14	sysroot/usr/include/handlers.h	84;"	d
IRQ15	kernel/arch/i386/include/handlers.h	85;"	d
IRQ15	sysroot/usr/include/handlers.h	85;"	d
IRQ2	kernel/arch/i386/include/handlers.h	72;"	d
IRQ2	sysroot/usr/include/handlers.h	72;"	d
IRQ3	kernel/arch/i386/include/handlers.h	73;"	d
IRQ3	sysroot/usr/include/handlers.h	73;"	d
IRQ4	kernel/arch/i386/include/handlers.h	74;"	d
IRQ4	sysroot/usr/include/handlers.h	74;"	d
IRQ5	kernel/arch/i386/include/handlers.h	75;"	d
IRQ5	sysroot/usr/include/handlers.h	75;"	d
IRQ6	kernel/arch/i386/include/handlers.h	76;"	d
IRQ6	sysroot/usr/include/handlers.h	76;"	d
IRQ7	kernel/arch/i386/include/handlers.h	77;"	d
IRQ7	sysroot/usr/include/handlers.h	77;"	d
IRQ8	kernel/arch/i386/include/handlers.h	78;"	d
IRQ8	sysroot/usr/include/handlers.h	78;"	d
IRQ9	kernel/arch/i386/include/handlers.h	79;"	d
IRQ9	sysroot/usr/include/handlers.h	79;"	d
IRQ_clear_mask	kernel/arch/i386/pic.c	/^void IRQ_clear_mask(unsigned char IRQline) {$/;"	f
IRQ_set_mask	kernel/arch/i386/pic.c	/^void IRQ_set_mask(unsigned char IRQline) {$/;"	f
ISR_ERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_ERRCODE   10$/;"	l
ISR_ERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_ERRCODE   11$/;"	l
ISR_ERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_ERRCODE   12$/;"	l
ISR_ERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_ERRCODE   13$/;"	l
ISR_ERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_ERRCODE   14$/;"	l
ISR_ERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_ERRCODE   8$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 0$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 1$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 128$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 15$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 16$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 17$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 18$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 19$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 2$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 20$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 21$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 22$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 23$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 24$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 25$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 26$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 27$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 28$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 29$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 3$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 30$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 31$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 4$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 5$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 6$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 7$/;"	l
ISR_NOERRCODE	kernel/arch/i386/interrupt.asm	/^ISR_NOERRCODE 9$/;"	l
Intel	kernel/system/cpu.c	/^char *Intel[] = {$/;"	v
Intel_Other	kernel/system/cpu.c	/^char *Intel_Other[] = {$/;"	v
KDEL	kernel/include/keyboard.h	43;"	d
KDEL	sysroot/usr/include/keyboard.h	43;"	d
KDOWN	kernel/include/keyboard.h	50;"	d
KDOWN	sysroot/usr/include/keyboard.h	50;"	d
KEND	kernel/include/keyboard.h	45;"	d
KEND	sysroot/usr/include/keyboard.h	45;"	d
KESC	kernel/include/keyboard.h	27;"	d
KESC	sysroot/usr/include/keyboard.h	27;"	d
KEYBOARD_BUFFER_SIZE	kernel/include/keyboard.h	11;"	d
KEYBOARD_BUFFER_SIZE	sysroot/usr/include/keyboard.h	11;"	d
KF1	kernel/include/keyboard.h	28;"	d
KF1	sysroot/usr/include/keyboard.h	28;"	d
KF10	kernel/include/keyboard.h	37;"	d
KF10	sysroot/usr/include/keyboard.h	37;"	d
KF11	kernel/include/keyboard.h	38;"	d
KF11	sysroot/usr/include/keyboard.h	38;"	d
KF12	kernel/include/keyboard.h	39;"	d
KF12	sysroot/usr/include/keyboard.h	39;"	d
KF2	kernel/include/keyboard.h	29;"	d
KF2	sysroot/usr/include/keyboard.h	29;"	d
KF3	kernel/include/keyboard.h	30;"	d
KF3	sysroot/usr/include/keyboard.h	30;"	d
KF4	kernel/include/keyboard.h	31;"	d
KF4	sysroot/usr/include/keyboard.h	31;"	d
KF5	kernel/include/keyboard.h	32;"	d
KF5	sysroot/usr/include/keyboard.h	32;"	d
KF6	kernel/include/keyboard.h	33;"	d
KF6	sysroot/usr/include/keyboard.h	33;"	d
KF7	kernel/include/keyboard.h	34;"	d
KF7	sysroot/usr/include/keyboard.h	34;"	d
KF8	kernel/include/keyboard.h	35;"	d
KF8	sysroot/usr/include/keyboard.h	35;"	d
KF9	kernel/include/keyboard.h	36;"	d
KF9	sysroot/usr/include/keyboard.h	36;"	d
KHOME	kernel/include/keyboard.h	44;"	d
KHOME	sysroot/usr/include/keyboard.h	44;"	d
KINS	kernel/include/keyboard.h	42;"	d
KINS	sysroot/usr/include/keyboard.h	42;"	d
KLEFT	kernel/include/keyboard.h	48;"	d
KLEFT	sysroot/usr/include/keyboard.h	48;"	d
KLWIN	kernel/include/keyboard.h	65;"	d
KLWIN	sysroot/usr/include/keyboard.h	65;"	d
KMENU	kernel/include/keyboard.h	67;"	d
KMENU	sysroot/usr/include/keyboard.h	67;"	d
KMETA_ALT	kernel/include/keyboard.h	54;"	d
KMETA_ALT	sysroot/usr/include/keyboard.h	54;"	d
KMETA_ANY	kernel/include/keyboard.h	57;"	d
KMETA_ANY	sysroot/usr/include/keyboard.h	57;"	d
KMETA_CAPS	kernel/include/keyboard.h	58;"	d
KMETA_CAPS	sysroot/usr/include/keyboard.h	58;"	d
KMETA_CTRL	kernel/include/keyboard.h	55;"	d
KMETA_CTRL	sysroot/usr/include/keyboard.h	55;"	d
KMETA_NUM	kernel/include/keyboard.h	59;"	d
KMETA_NUM	sysroot/usr/include/keyboard.h	59;"	d
KMETA_SCRL	kernel/include/keyboard.h	60;"	d
KMETA_SCRL	sysroot/usr/include/keyboard.h	60;"	d
KMETA_SHIFT	kernel/include/keyboard.h	56;"	d
KMETA_SHIFT	sysroot/usr/include/keyboard.h	56;"	d
KPAUSE	kernel/include/keyboard.h	64;"	d
KPAUSE	sysroot/usr/include/keyboard.h	64;"	d
KPGDN	kernel/include/keyboard.h	47;"	d
KPGDN	sysroot/usr/include/keyboard.h	47;"	d
KPGUP	kernel/include/keyboard.h	46;"	d
KPGUP	sysroot/usr/include/keyboard.h	46;"	d
KPRNT	kernel/include/keyboard.h	63;"	d
KPRNT	sysroot/usr/include/keyboard.h	63;"	d
KRCAPS_LOCK	kernel/include/keyboard.h	74;"	d
KRCAPS_LOCK	sysroot/usr/include/keyboard.h	74;"	d
KRDEL	kernel/include/keyboard.h	77;"	d
KRDEL	sysroot/usr/include/keyboard.h	77;"	d
KRIGHT	kernel/include/keyboard.h	51;"	d
KRIGHT	sysroot/usr/include/keyboard.h	51;"	d
KRLEFT_ALT	kernel/include/keyboard.h	70;"	d
KRLEFT_ALT	sysroot/usr/include/keyboard.h	70;"	d
KRLEFT_CTRL	kernel/include/keyboard.h	68;"	d
KRLEFT_CTRL	sysroot/usr/include/keyboard.h	68;"	d
KRLEFT_SHIFT	kernel/include/keyboard.h	72;"	d
KRLEFT_SHIFT	sysroot/usr/include/keyboard.h	72;"	d
KRNUM_LOCK	kernel/include/keyboard.h	76;"	d
KRNUM_LOCK	sysroot/usr/include/keyboard.h	76;"	d
KRRIGHT_ALT	kernel/include/keyboard.h	71;"	d
KRRIGHT_ALT	sysroot/usr/include/keyboard.h	71;"	d
KRRIGHT_CTRL	kernel/include/keyboard.h	69;"	d
KRRIGHT_CTRL	sysroot/usr/include/keyboard.h	69;"	d
KRRIGHT_SHIFT	kernel/include/keyboard.h	73;"	d
KRRIGHT_SHIFT	sysroot/usr/include/keyboard.h	73;"	d
KRSCROLL_LOCK	kernel/include/keyboard.h	75;"	d
KRSCROLL_LOCK	sysroot/usr/include/keyboard.h	75;"	d
KRWIN	kernel/include/keyboard.h	66;"	d
KRWIN	sysroot/usr/include/keyboard.h	66;"	d
KUP	kernel/include/keyboard.h	49;"	d
KUP	sysroot/usr/include/keyboard.h	49;"	d
KernelClass	kernel/include/kernel_class.h	/^class KernelClass {$/;"	c
KernelClass	kernel/init/kernel_class.cpp	/^KernelClass::KernelClass()$/;"	f	class:KernelClass
KernelClass	sysroot/usr/include/kernel_class.h	/^class KernelClass {$/;"	c
LDFLAGS	kernel/Makefile	/^LDFLAGS:=$(LDFLAGS) $(KERNEL_ARCH_LDFLAGS)$/;"	m
LDFLAGS	kernel/Makefile	/^LDFLAGS:=$(LDFLAGS)$/;"	m
LDFLAGS	kernel/Makefile	/^LDFLAGS?=$/;"	m
LDFLAGS	libc/Makefile	/^LDFLAGS?=$/;"	m
LIBDIR	libc/Makefile	/^LIBDIR?=$(EXEC_PREFIX)\/lib$/;"	m
LIBK_CFLAGS	libc/Makefile	/^LIBK_CFLAGS:=$(CFLAGS) -ffreestanding$/;"	m
LIBK_CFLAGS	libc/Makefile	/^LIBK_CFLAGS:=$(LIBK_CFLAGS) $(KERNEL_ARCH_CFLAGS)$/;"	m
LIBK_CPFLAGS	libc/Makefile	/^LIBK_CPFLAGS:=$(LIBK_CPPFLAGS) $(KERNEL_ARCH_CPPFLAGS)$/;"	m
LIBK_CPPFLAGS	libc/Makefile	/^LIBK_CPPFLAGS:=$(CPPFLAGS) -D__is_photon_kernel$/;"	m
LIBK_OBJS	libc/Makefile	/^LIBK_OBJS:=$(FREEOBJS:.o=.libk.o)$/;"	m
LIBS	kernel/Makefile	/^LIBS:=$(LIBS) $(KERNEL_ARCH_LIBS)$/;"	m
LIBS	kernel/Makefile	/^LIBS:=$(LIBS) -nostdlib -lk -lgcc$/;"	m
LIBS	kernel/Makefile	/^LIBS?= -L..\/libc$/;"	m
LIBS	libc/Makefile	/^LIBS?=$/;"	m
MAGIC	kernel/arch/i386/boot/boot.asm	/^MAGIC       equ  0x1BADB002          $/;"	d
MBALIGN	kernel/arch/i386/boot/boot.asm	/^MBALIGN     equ  1<<0               $/;"	d
MEMINFO	kernel/arch/i386/boot/boot.asm	/^MEMINFO     equ  1<<1           $/;"	d
MULTIBOOT_FLAG_AOUT	kernel/include/multiboot.h	8;"	d
MULTIBOOT_FLAG_AOUT	sysroot/usr/include/multiboot.h	8;"	d
MULTIBOOT_FLAG_APM	kernel/include/multiboot.h	13;"	d
MULTIBOOT_FLAG_APM	sysroot/usr/include/multiboot.h	13;"	d
MULTIBOOT_FLAG_CMDLINE	kernel/include/multiboot.h	6;"	d
MULTIBOOT_FLAG_CMDLINE	sysroot/usr/include/multiboot.h	6;"	d
MULTIBOOT_FLAG_CONFIG	kernel/include/multiboot.h	11;"	d
MULTIBOOT_FLAG_CONFIG	sysroot/usr/include/multiboot.h	11;"	d
MULTIBOOT_FLAG_DEVICE	kernel/include/multiboot.h	5;"	d
MULTIBOOT_FLAG_DEVICE	sysroot/usr/include/multiboot.h	5;"	d
MULTIBOOT_FLAG_ELF	kernel/include/multiboot.h	9;"	d
MULTIBOOT_FLAG_ELF	sysroot/usr/include/multiboot.h	9;"	d
MULTIBOOT_FLAG_LOADER	kernel/include/multiboot.h	12;"	d
MULTIBOOT_FLAG_LOADER	sysroot/usr/include/multiboot.h	12;"	d
MULTIBOOT_FLAG_MEM	kernel/include/multiboot.h	4;"	d
MULTIBOOT_FLAG_MEM	sysroot/usr/include/multiboot.h	4;"	d
MULTIBOOT_FLAG_MMAP	kernel/include/multiboot.h	10;"	d
MULTIBOOT_FLAG_MMAP	sysroot/usr/include/multiboot.h	10;"	d
MULTIBOOT_FLAG_MODS	kernel/include/multiboot.h	7;"	d
MULTIBOOT_FLAG_MODS	sysroot/usr/include/multiboot.h	7;"	d
MULTIBOOT_FLAG_VBE	kernel/include/multiboot.h	14;"	d
MULTIBOOT_FLAG_VBE	sysroot/usr/include/multiboot.h	14;"	d
NEWLINE	kernel/include/keyboard.h	24;"	d
NEWLINE	sysroot/usr/include/keyboard.h	24;"	d
OBJS	kernel/Makefile	/^OBJS:=\\$/;"	m
OBJS	libc/Makefile	/^OBJS:=\\$/;"	m
OBJ_LINK_LIST	kernel/Makefile	/^OBJ_LINK_LIST:=\\$/;"	m
OFFSET_FROM_BIT	kernel/include/system.h	20;"	d
OFFSET_FROM_BIT	sysroot/usr/include/system.h	20;"	d
OS_Name	kernel/include/system.h	9;"	d
OS_Name	sysroot/usr/include/system.h	9;"	d
PAGE_ALIGN	kernel/arch/i386/include/pmm.h	28;"	d
PAGE_ALIGN	sysroot/usr/include/pmm.h	28;"	d
PIC1	kernel/arch/i386/include/pic.h	4;"	d
PIC1	sysroot/usr/include/pic.h	4;"	d
PIC1_COMMAND	kernel/arch/i386/include/pic.h	6;"	d
PIC1_COMMAND	sysroot/usr/include/pic.h	6;"	d
PIC1_DATA	kernel/arch/i386/include/pic.h	7;"	d
PIC1_DATA	sysroot/usr/include/pic.h	7;"	d
PIC2	kernel/arch/i386/include/pic.h	5;"	d
PIC2	sysroot/usr/include/pic.h	5;"	d
PIC2_COMMAND	kernel/arch/i386/include/pic.h	8;"	d
PIC2_COMMAND	sysroot/usr/include/pic.h	8;"	d
PIC2_DATA	kernel/arch/i386/include/pic.h	9;"	d
PIC2_DATA	sysroot/usr/include/pic.h	9;"	d
PREFIX	kernel/Makefile	/^PREFIX?=\/usr\/local$/;"	m
PREFIX	libc/Makefile	/^PREFIX?=\/usr\/local$/;"	m
RETURN	kernel/include/keyboard.h	23;"	d
RETURN	sysroot/usr/include/keyboard.h	23;"	d
Relase_Date	kernel/include/system.h	11;"	d
Relase_Date	sysroot/usr/include/system.h	11;"	d
STDIO_SIZE	libc/include/stdio.h	10;"	d
STDIO_SIZE	sysroot/usr/include/stdio.h	10;"	d
TAB	kernel/include/keyboard.h	21;"	d
TAB	sysroot/usr/include/keyboard.h	21;"	d
USasciiNonShift	kernel/drivers/keyboard.c	/^static char USasciiNonShift[] = {$/;"	v	file:
USasciiShift	kernel/drivers/keyboard.c	/^static char USasciiShift[] = {$/;"	v	file:
VGA_HEIGHT	kernel/include/vga.h	/^static const size_t VGA_HEIGHT = 25;$/;"	v
VGA_HEIGHT	sysroot/usr/include/vga.h	/^static const size_t VGA_HEIGHT = 25;$/;"	v
VGA_WIDTH	kernel/include/vga.h	/^static const size_t VGA_WIDTH = 80;$/;"	v
VGA_WIDTH	sysroot/usr/include/vga.h	/^static const size_t VGA_WIDTH = 80;$/;"	v
Version	kernel/include/system.h	10;"	d
Version	sysroot/usr/include/system.h	10;"	d
_ICXXABI_H	kernel/include/icxxabi.h	2;"	d
_ICXXABI_H	sysroot/usr/include/icxxabi.h	2;"	d
_SYS_CDEFS_H	libc/include/sys/cdefs.h	2;"	d
_SYS_CDEFS_H	sysroot/usr/include/sys/cdefs.h	2;"	d
__MULTIBOOT_H	kernel/include/multiboot.h	2;"	d
__MULTIBOOT_H	sysroot/usr/include/multiboot.h	2;"	d
__atexit_func_count	kernel/init/icxxabi.cpp	/^uarch_t __atexit_func_count = 0;$/;"	v
__atexit_funcs	kernel/init/icxxabi.cpp	/^atexit_func_entry_t __atexit_funcs[ATEXIT_MAX_FUNCS];$/;"	v
__cxa_atexit	kernel/init/icxxabi.cpp	/^int __cxa_atexit(void (*f)(void *), void *objptr, void *dso)$/;"	f
__cxa_finalize	kernel/init/icxxabi.cpp	/^void __cxa_finalize(void *f)$/;"	f
__cxa_pure_virtual	kernel/init/icxxabi.cpp	/^extern "C" void __cxa_pure_virtual()$/;"	f
__myos_libc	libc/include/sys/cdefs.h	4;"	d
__myos_libc	sysroot/usr/include/sys/cdefs.h	4;"	d
_clock_h	kernel/arch/i386/include/pit.h	15;"	d
_clock_h	sysroot/usr/include/pit.h	15;"	d
_fini	kernel/arch/i386/crti.S	/^_fini:$/;"	l
_fini	libc/arch/i386/crti.S	/^_fini:$/;"	l
_gdt_h	kernel/arch/i386/include/gdt.h	18;"	d
_gdt_h	sysroot/usr/include/gdt.h	18;"	d
_handlers_h	kernel/arch/i386/include/handlers.h	17;"	d
_handlers_h	sysroot/usr/include/handlers.h	17;"	d
_idt_h	kernel/arch/i386/include/idt.h	15;"	d
_idt_h	sysroot/usr/include/idt.h	15;"	d
_init	kernel/arch/i386/crti.S	/^_init:$/;"	l
_init	libc/arch/i386/crti.S	/^_init:$/;"	l
_init_h	kernel/include/init.h	2;"	d
_init_h	sysroot/usr/include/init.h	2;"	d
_io_h	kernel/include/io.h	2;"	d
_io_h	sysroot/usr/include/io.h	2;"	d
_kernel_class_h	kernel/include/kernel_class.h	2;"	d
_kernel_class_h	sysroot/usr/include/kernel_class.h	2;"	d
_keyboard_h	kernel/include/keyboard.h	2;"	d
_keyboard_h	sysroot/usr/include/keyboard.h	2;"	d
_kheap_h	kernel/include/kheap.h	2;"	d
_kheap_h	sysroot/usr/include/kheap.h	2;"	d
_list_h	libc/include/list.h	2;"	d
_list_h	sysroot/usr/include/list.h	2;"	d
_phapi_h	libc/include/phapi.h	2;"	d
_phapi_h	sysroot/usr/include/phapi.h	2;"	d
_pic_h	kernel/arch/i386/include/pic.h	2;"	d
_pic_h	sysroot/usr/include/pic.h	2;"	d
_pmm_h	kernel/arch/i386/include/pmm.h	21;"	d
_pmm_h	sysroot/usr/include/pmm.h	21;"	d
_start	kernel/arch/i386/boot/boot.asm	/^_start:$/;"	l
_start	libc/arch/i386/crt0.S	/^_start:$/;"	l
_stdio_h	libc/include/stdio.h	2;"	d
_stdio_h	sysroot/usr/include/stdio.h	2;"	d
_stdlib_h	libc/include/stdlib.h	2;"	d
_stdlib_h	sysroot/usr/include/stdlib.h	2;"	d
_string_h	libc/include/string.h	2;"	d
_string_h	sysroot/usr/include/string.h	2;"	d
_system_h	kernel/include/system.h	2;"	d
_system_h	sysroot/usr/include/system.h	2;"	d
_task_h	kernel/include/task.h	2;"	d
_task_h	sysroot/usr/include/task.h	2;"	d
_time_h	kernel/include/time.h	2;"	d
_time_h	sysroot/usr/include/time.h	2;"	d
_vga_h	kernel/include/vga.h	2;"	d
_vga_h	sysroot/usr/include/vga.h	2;"	d
_vmm_h	kernel/arch/i386/include/vmm.h	2;"	d
_vmm_h	sysroot/usr/include/vmm.h	2;"	d
abort	libc/stdlib/abort.c	/^void abort(void)$/;"	f
access	kernel/arch/i386/include/gdt.h	/^	uint8_t access;$/;"	m	struct:gdt_entry_struct
access	sysroot/usr/include/gdt.h	/^	uint8_t access;$/;"	m	struct:gdt_entry_struct
add_hex_prefix	libc/stdlib/itoa.c	/^static void add_hex_prefix(char *buf)$/;"	f	file:
addr	kernel/include/multiboot.h	/^    uint32_t addr;$/;"	m	struct:multiboot
addr	sysroot/usr/include/multiboot.h	/^    uint32_t addr;$/;"	m	struct:multiboot
allocated	kernel/include/kheap.h	/^    uint32_t allocated : 1;$/;"	m	struct:header
allocated	sysroot/usr/include/kheap.h	/^    uint32_t allocated : 1;$/;"	m	struct:header
always0	kernel/arch/i386/include/idt.h	/^    uint8_t  always0;             $/;"	m	struct:idt_entry_struct
always0	sysroot/usr/include/idt.h	/^    uint8_t  always0;             $/;"	m	struct:idt_entry_struct
apm_table	kernel/include/multiboot.h	/^    uint32_t apm_table;$/;"	m	struct:multiboot
apm_table	sysroot/usr/include/multiboot.h	/^    uint32_t apm_table;$/;"	m	struct:multiboot
array	libc/include/list.h	/^	type_t *array;$/;"	m	struct:__anon1
array	sysroot/usr/include/list.h	/^	type_t *array;$/;"	m	struct:__anon2
ascii_S	kernel/include/keyboard.h	/^char *ascii_S;$/;"	v
ascii_S	sysroot/usr/include/keyboard.h	/^char *ascii_S;$/;"	v
ascii_s	kernel/include/keyboard.h	/^char *ascii_s;$/;"	v
ascii_s	sysroot/usr/include/keyboard.h	/^char *ascii_s;$/;"	v
atexit_func_entry_t	kernel/include/icxxabi.h	/^struct atexit_func_entry_t$/;"	s
atexit_func_entry_t	sysroot/usr/include/icxxabi.h	/^struct atexit_func_entry_t$/;"	s
atoi	libc/stdlib/atoi.c	/^int atoi(char *str)$/;"	f
base	kernel/arch/i386/include/gdt.h	/^	uint32_t base;$/;"	m	struct:gdt_ptr_struct
base	kernel/arch/i386/include/idt.h	/^    uint32_t base;              $/;"	m	struct:idt_ptr_struct
base	sysroot/usr/include/gdt.h	/^	uint32_t base;$/;"	m	struct:gdt_ptr_struct
base	sysroot/usr/include/idt.h	/^    uint32_t base;              $/;"	m	struct:idt_ptr_struct
base_hi	kernel/arch/i386/include/idt.h	/^    uint16_t base_hi;             $/;"	m	struct:idt_entry_struct
base_hi	sysroot/usr/include/idt.h	/^    uint16_t base_hi;             $/;"	m	struct:idt_entry_struct
base_high	kernel/arch/i386/include/gdt.h	/^	uint8_t base_high;$/;"	m	struct:gdt_entry_struct
base_high	sysroot/usr/include/gdt.h	/^	uint8_t base_high;$/;"	m	struct:gdt_entry_struct
base_lo	kernel/arch/i386/include/idt.h	/^    uint16_t base_lo;$/;"	m	struct:idt_entry_struct
base_lo	sysroot/usr/include/idt.h	/^    uint16_t base_lo;$/;"	m	struct:idt_entry_struct
base_low	kernel/arch/i386/include/gdt.h	/^	uint16_t base_low;$/;"	m	struct:gdt_entry_struct
base_low	sysroot/usr/include/gdt.h	/^	uint16_t base_low;$/;"	m	struct:gdt_entry_struct
base_mid	kernel/arch/i386/include/gdt.h	/^	uint8_t base_mid;$/;"	m	struct:gdt_entry_struct
base_mid	sysroot/usr/include/gdt.h	/^	uint8_t base_mid;$/;"	m	struct:gdt_entry_struct
boot_device	kernel/include/multiboot.h	/^    uint32_t boot_device;$/;"	m	struct:multiboot
boot_device	sysroot/usr/include/multiboot.h	/^    uint32_t boot_device;$/;"	m	struct:multiboot
boot_loader_name	kernel/include/multiboot.h	/^    uint32_t boot_loader_name;$/;"	m	struct:multiboot
boot_loader_name	sysroot/usr/include/multiboot.h	/^    uint32_t boot_loader_name;$/;"	m	struct:multiboot
call	kernel/drivers/io.c	/^void call(int32_t eax, uint32_t ebx, uint32_t ecx, uint32_t edx, uint32_t esi, uint32_t edi)$/;"	f
clear_vga	kernel/drivers/vga.c	/^void clear_vga()$/;"	f
cli	kernel/include/system.h	15;"	d
cli	sysroot/usr/include/system.h	15;"	d
cmdline	kernel/include/multiboot.h	/^    uint32_t cmdline;$/;"	m	struct:multiboot
cmdline	sysroot/usr/include/multiboot.h	/^    uint32_t cmdline;$/;"	m	struct:multiboot
col	kernel/drivers/vga.c	/^size_t col;$/;"	v
config_table	kernel/include/multiboot.h	/^    uint32_t config_table;$/;"	m	struct:multiboot
config_table	sysroot/usr/include/multiboot.h	/^    uint32_t config_table;$/;"	m	struct:multiboot
cpuid	kernel/system/cpu.c	35;"	d	file:
cr3	kernel/arch/i386/include/gdt.h	/^	uint32_t cr3;$/;"	m	struct:tss_entry_struct
cr3	kernel/include/system.h	/^    uint32_t eax, ebx, ecx, edx, esi, edi, esp, ebp, eip, eflags, cr3;$/;"	m	struct:t_regs
cr3	sysroot/usr/include/gdt.h	/^	uint32_t cr3;$/;"	m	struct:tss_entry_struct
cr3	sysroot/usr/include/system.h	/^    uint32_t eax, ebx, ecx, edx, esi, edi, esp, ebp, eip, eflags, cr3;$/;"	m	struct:t_regs
create_list	libc/phapi/list.c	/^list_t create_list(uint32_t max_size, lessthan_pred_t lessthan)$/;"	f
create_task	kernel/system/task.c	/^task_t *create_task(task_t *new_task, void (*main)(), int32_t flags, uint32_t pagedir)$/;"	f
cs	kernel/arch/i386/include/gdt.h	/^	uint32_t cs;         \/\/ The value to load into CS when we change to kernel mode.$/;"	m	struct:tss_entry_struct
cs	kernel/include/system.h	/^    uint32_t eip, cs, eflags, useresp, ss; \/\/ Pushed by the processor automatically.$/;"	m	struct:registers
cs	sysroot/usr/include/gdt.h	/^	uint32_t cs;         \/\/ The value to load into CS when we change to kernel mode.$/;"	m	struct:tss_entry_struct
cs	sysroot/usr/include/system.h	/^    uint32_t eip, cs, eflags, useresp, ss; \/\/ Pushed by the processor automatically.$/;"	m	struct:registers
current_task	kernel/include/task.h	/^task_t *current_task;$/;"	v
current_task	sysroot/usr/include/task.h	/^task_t *current_task;$/;"	v
debug_mem_mngr	kernel/arch/i386/vmm.c	/^void debug_mem_mngr()$/;"	f
default_bg	kernel/drivers/vga.c	/^enum vga_color default_bg = COLOR_BLACK;$/;"	v	typeref:enum:vga_color
default_fg	kernel/drivers/vga.c	/^enum vga_color default_fg = COLOR_LIGHT_GREY;$/;"	v	typeref:enum:vga_color
destroy_list	libc/phapi/list.c	/^void destroy_list(list_t *array)$/;"	f
destructor_func	kernel/include/icxxabi.h	/^    void (*destructor_func)(void *);$/;"	m	struct:atexit_func_entry_t
destructor_func	sysroot/usr/include/icxxabi.h	/^    void (*destructor_func)(void *);$/;"	m	struct:atexit_func_entry_t
detect_cpu	kernel/system/cpu.c	/^int detect_cpu(void) { \/* or main() if your trying to port this as an independant application *\/$/;"	f
do_amd	kernel/system/cpu.c	/^int do_amd(void) {$/;"	f
do_intel	kernel/system/cpu.c	/^int do_intel(void) {$/;"	f
drives_addr	kernel/include/multiboot.h	/^    uint32_t drives_addr;$/;"	m	struct:multiboot
drives_addr	sysroot/usr/include/multiboot.h	/^    uint32_t drives_addr;$/;"	m	struct:multiboot
drives_length	kernel/include/multiboot.h	/^    uint32_t drives_length;$/;"	m	struct:multiboot
drives_length	sysroot/usr/include/multiboot.h	/^    uint32_t drives_length;$/;"	m	struct:multiboot
ds	kernel/arch/i386/include/gdt.h	/^	uint32_t ds;         \/\/ The value to load into DS when we change to kernel mode.$/;"	m	struct:tss_entry_struct
ds	kernel/include/system.h	/^    uint32_t ds;                  \/\/ Data segment selector$/;"	m	struct:registers
ds	sysroot/usr/include/gdt.h	/^	uint32_t ds;         \/\/ The value to load into DS when we change to kernel mode.$/;"	m	struct:tss_entry_struct
ds	sysroot/usr/include/system.h	/^    uint32_t ds;                  \/\/ Data segment selector$/;"	m	struct:registers
dso_handle	kernel/include/icxxabi.h	/^    void *dso_handle;$/;"	m	struct:atexit_func_entry_t
dso_handle	sysroot/usr/include/icxxabi.h	/^    void *dso_handle;$/;"	m	struct:atexit_func_entry_t
eax	kernel/arch/i386/include/gdt.h	/^	uint32_t eax;$/;"	m	struct:tss_entry_struct
eax	kernel/include/system.h	/^    uint32_t eax, ebx, ecx, edx, esi, edi, esp, ebp, eip, eflags, cr3;$/;"	m	struct:t_regs
eax	kernel/include/system.h	/^    uint32_t eax;$/;"	m	struct:g_regs
eax	kernel/include/system.h	/^    uint32_t edi, esi, ebp, esp, ebx, edx, ecx, eax; \/\/ Pushed by pusha.$/;"	m	struct:registers
eax	sysroot/usr/include/gdt.h	/^	uint32_t eax;$/;"	m	struct:tss_entry_struct
eax	sysroot/usr/include/system.h	/^    uint32_t eax, ebx, ecx, edx, esi, edi, esp, ebp, eip, eflags, cr3;$/;"	m	struct:t_regs
eax	sysroot/usr/include/system.h	/^    uint32_t eax;$/;"	m	struct:g_regs
eax	sysroot/usr/include/system.h	/^    uint32_t edi, esi, ebp, esp, ebx, edx, ecx, eax; \/\/ Pushed by pusha.$/;"	m	struct:registers
ebp	kernel/arch/i386/include/gdt.h	/^	uint32_t ebp;$/;"	m	struct:tss_entry_struct
ebp	kernel/include/system.h	/^    uint32_t eax, ebx, ecx, edx, esi, edi, esp, ebp, eip, eflags, cr3;$/;"	m	struct:t_regs
ebp	kernel/include/system.h	/^    uint32_t edi, esi, ebp, esp, ebx, edx, ecx, eax; \/\/ Pushed by pusha.$/;"	m	struct:registers
ebp	sysroot/usr/include/gdt.h	/^	uint32_t ebp;$/;"	m	struct:tss_entry_struct
ebp	sysroot/usr/include/system.h	/^    uint32_t eax, ebx, ecx, edx, esi, edi, esp, ebp, eip, eflags, cr3;$/;"	m	struct:t_regs
ebp	sysroot/usr/include/system.h	/^    uint32_t edi, esi, ebp, esp, ebx, edx, ecx, eax; \/\/ Pushed by pusha.$/;"	m	struct:registers
ebx	kernel/arch/i386/include/gdt.h	/^	uint32_t ebx;$/;"	m	struct:tss_entry_struct
ebx	kernel/include/system.h	/^    uint32_t eax, ebx, ecx, edx, esi, edi, esp, ebp, eip, eflags, cr3;$/;"	m	struct:t_regs
ebx	kernel/include/system.h	/^    uint32_t ebx;$/;"	m	struct:g_regs
ebx	kernel/include/system.h	/^    uint32_t edi, esi, ebp, esp, ebx, edx, ecx, eax; \/\/ Pushed by pusha.$/;"	m	struct:registers
ebx	sysroot/usr/include/gdt.h	/^	uint32_t ebx;$/;"	m	struct:tss_entry_struct
ebx	sysroot/usr/include/system.h	/^    uint32_t eax, ebx, ecx, edx, esi, edi, esp, ebp, eip, eflags, cr3;$/;"	m	struct:t_regs
ebx	sysroot/usr/include/system.h	/^    uint32_t ebx;$/;"	m	struct:g_regs
ebx	sysroot/usr/include/system.h	/^    uint32_t edi, esi, ebp, esp, ebx, edx, ecx, eax; \/\/ Pushed by pusha.$/;"	m	struct:registers
ecx	kernel/arch/i386/include/gdt.h	/^	uint32_t ecx;$/;"	m	struct:tss_entry_struct
ecx	kernel/include/system.h	/^    uint32_t eax, ebx, ecx, edx, esi, edi, esp, ebp, eip, eflags, cr3;$/;"	m	struct:t_regs
ecx	kernel/include/system.h	/^    uint32_t ecx;$/;"	m	struct:g_regs
ecx	kernel/include/system.h	/^    uint32_t edi, esi, ebp, esp, ebx, edx, ecx, eax; \/\/ Pushed by pusha.$/;"	m	struct:registers
ecx	sysroot/usr/include/gdt.h	/^	uint32_t ecx;$/;"	m	struct:tss_entry_struct
ecx	sysroot/usr/include/system.h	/^    uint32_t eax, ebx, ecx, edx, esi, edi, esp, ebp, eip, eflags, cr3;$/;"	m	struct:t_regs
ecx	sysroot/usr/include/system.h	/^    uint32_t ecx;$/;"	m	struct:g_regs
ecx	sysroot/usr/include/system.h	/^    uint32_t edi, esi, ebp, esp, ebx, edx, ecx, eax; \/\/ Pushed by pusha.$/;"	m	struct:registers
edi	kernel/arch/i386/include/gdt.h	/^	uint32_t edi;$/;"	m	struct:tss_entry_struct
edi	kernel/include/system.h	/^    uint32_t eax, ebx, ecx, edx, esi, edi, esp, ebp, eip, eflags, cr3;$/;"	m	struct:t_regs
edi	kernel/include/system.h	/^    uint32_t edi, esi, ebp, esp, ebx, edx, ecx, eax; \/\/ Pushed by pusha.$/;"	m	struct:registers
edi	kernel/include/system.h	/^    uint32_t edi;$/;"	m	struct:g_regs
edi	sysroot/usr/include/gdt.h	/^	uint32_t edi;$/;"	m	struct:tss_entry_struct
edi	sysroot/usr/include/system.h	/^    uint32_t eax, ebx, ecx, edx, esi, edi, esp, ebp, eip, eflags, cr3;$/;"	m	struct:t_regs
edi	sysroot/usr/include/system.h	/^    uint32_t edi, esi, ebp, esp, ebx, edx, ecx, eax; \/\/ Pushed by pusha.$/;"	m	struct:registers
edi	sysroot/usr/include/system.h	/^    uint32_t edi;$/;"	m	struct:g_regs
edx	kernel/arch/i386/include/gdt.h	/^	uint32_t edx;$/;"	m	struct:tss_entry_struct
edx	kernel/include/system.h	/^    uint32_t eax, ebx, ecx, edx, esi, edi, esp, ebp, eip, eflags, cr3;$/;"	m	struct:t_regs
edx	kernel/include/system.h	/^    uint32_t edi, esi, ebp, esp, ebx, edx, ecx, eax; \/\/ Pushed by pusha.$/;"	m	struct:registers
edx	kernel/include/system.h	/^    uint32_t edx;$/;"	m	struct:g_regs
edx	sysroot/usr/include/gdt.h	/^	uint32_t edx;$/;"	m	struct:tss_entry_struct
edx	sysroot/usr/include/system.h	/^    uint32_t eax, ebx, ecx, edx, esi, edi, esp, ebp, eip, eflags, cr3;$/;"	m	struct:t_regs
edx	sysroot/usr/include/system.h	/^    uint32_t edi, esi, ebp, esp, ebx, edx, ecx, eax; \/\/ Pushed by pusha.$/;"	m	struct:registers
edx	sysroot/usr/include/system.h	/^    uint32_t edx;$/;"	m	struct:g_regs
eflags	kernel/arch/i386/include/gdt.h	/^	uint32_t eflags;$/;"	m	struct:tss_entry_struct
eflags	kernel/include/system.h	/^    uint32_t eax, ebx, ecx, edx, esi, edi, esp, ebp, eip, eflags, cr3;$/;"	m	struct:t_regs
eflags	kernel/include/system.h	/^    uint32_t eip, cs, eflags, useresp, ss; \/\/ Pushed by the processor automatically.$/;"	m	struct:registers
eflags	sysroot/usr/include/gdt.h	/^	uint32_t eflags;$/;"	m	struct:tss_entry_struct
eflags	sysroot/usr/include/system.h	/^    uint32_t eax, ebx, ecx, edx, esi, edi, esp, ebp, eip, eflags, cr3;$/;"	m	struct:t_regs
eflags	sysroot/usr/include/system.h	/^    uint32_t eip, cs, eflags, useresp, ss; \/\/ Pushed by the processor automatically.$/;"	m	struct:registers
eip	kernel/arch/i386/include/gdt.h	/^	uint32_t eip;$/;"	m	struct:tss_entry_struct
eip	kernel/include/system.h	/^    uint32_t eax, ebx, ecx, edx, esi, edi, esp, ebp, eip, eflags, cr3;$/;"	m	struct:t_regs
eip	kernel/include/system.h	/^    uint32_t eip, cs, eflags, useresp, ss; \/\/ Pushed by the processor automatically.$/;"	m	struct:registers
eip	sysroot/usr/include/gdt.h	/^	uint32_t eip;$/;"	m	struct:tss_entry_struct
eip	sysroot/usr/include/system.h	/^    uint32_t eax, ebx, ecx, edx, esi, edi, esp, ebp, eip, eflags, cr3;$/;"	m	struct:t_regs
eip	sysroot/usr/include/system.h	/^    uint32_t eip, cs, eflags, useresp, ss; \/\/ Pushed by the processor automatically.$/;"	m	struct:registers
err_code	kernel/include/system.h	/^    uint32_t int_no, err_code;    \/\/ Interrupt number and error code (if applicable)$/;"	m	struct:registers
err_code	sysroot/usr/include/system.h	/^    uint32_t int_no, err_code;    \/\/ Interrupt number and error code (if applicable)$/;"	m	struct:registers
es	kernel/arch/i386/include/gdt.h	/^	uint32_t es;         \/\/ The value to load into ES when we change to kernel mode.$/;"	m	struct:tss_entry_struct
es	sysroot/usr/include/gdt.h	/^	uint32_t es;         \/\/ The value to load into ES when we change to kernel mode.$/;"	m	struct:tss_entry_struct
esi	kernel/arch/i386/include/gdt.h	/^	uint32_t esi;$/;"	m	struct:tss_entry_struct
esi	kernel/include/system.h	/^    uint32_t eax, ebx, ecx, edx, esi, edi, esp, ebp, eip, eflags, cr3;$/;"	m	struct:t_regs
esi	kernel/include/system.h	/^    uint32_t edi, esi, ebp, esp, ebx, edx, ecx, eax; \/\/ Pushed by pusha.$/;"	m	struct:registers
esi	kernel/include/system.h	/^    uint32_t esi;$/;"	m	struct:g_regs
esi	sysroot/usr/include/gdt.h	/^	uint32_t esi;$/;"	m	struct:tss_entry_struct
esi	sysroot/usr/include/system.h	/^    uint32_t eax, ebx, ecx, edx, esi, edi, esp, ebp, eip, eflags, cr3;$/;"	m	struct:t_regs
esi	sysroot/usr/include/system.h	/^    uint32_t edi, esi, ebp, esp, ebx, edx, ecx, eax; \/\/ Pushed by pusha.$/;"	m	struct:registers
esi	sysroot/usr/include/system.h	/^    uint32_t esi;$/;"	m	struct:g_regs
esp	kernel/arch/i386/include/gdt.h	/^	uint32_t esp;$/;"	m	struct:tss_entry_struct
esp	kernel/include/system.h	/^    uint32_t eax, ebx, ecx, edx, esi, edi, esp, ebp, eip, eflags, cr3;$/;"	m	struct:t_regs
esp	kernel/include/system.h	/^    uint32_t edi, esi, ebp, esp, ebx, edx, ecx, eax; \/\/ Pushed by pusha.$/;"	m	struct:registers
esp	sysroot/usr/include/gdt.h	/^	uint32_t esp;$/;"	m	struct:tss_entry_struct
esp	sysroot/usr/include/system.h	/^    uint32_t eax, ebx, ecx, edx, esi, edi, esp, ebp, eip, eflags, cr3;$/;"	m	struct:t_regs
esp	sysroot/usr/include/system.h	/^    uint32_t edi, esi, ebp, esp, ebx, edx, ecx, eax; \/\/ Pushed by pusha.$/;"	m	struct:registers
esp0	kernel/arch/i386/include/gdt.h	/^	uint32_t esp0;       \/\/ The stack pointer to load when we change to kernel mode.$/;"	m	struct:tss_entry_struct
esp0	sysroot/usr/include/gdt.h	/^	uint32_t esp0;       \/\/ The stack pointer to load when we change to kernel mode.$/;"	m	struct:tss_entry_struct
esp1	kernel/arch/i386/include/gdt.h	/^	uint32_t esp1;       \/\/ Unused...$/;"	m	struct:tss_entry_struct
esp1	sysroot/usr/include/gdt.h	/^	uint32_t esp1;       \/\/ Unused...$/;"	m	struct:tss_entry_struct
esp2	kernel/arch/i386/include/gdt.h	/^	uint32_t esp2;$/;"	m	struct:tss_entry_struct
esp2	sysroot/usr/include/gdt.h	/^	uint32_t esp2;$/;"	m	struct:tss_entry_struct
exit	libc/stdlib/exit.c	/^void exit(int status)$/;"	f
extern	kernel/arch/i386/interrupt.asm	/^extern irq_handler$/;"	l
extern	kernel/arch/i386/interrupt.asm	/^extern isr_handler$/;"	l
find_frame	kernel/arch/i386/pmm.c	/^uint32_t find_frame()$/;"	f
flags	kernel/arch/i386/include/idt.h	/^    uint8_t  flags;              $/;"	m	struct:idt_entry_struct
flags	kernel/include/multiboot.h	/^    uint32_t flags;$/;"	m	struct:multiboot
flags	sysroot/usr/include/idt.h	/^    uint8_t  flags;              $/;"	m	struct:idt_entry_struct
flags	sysroot/usr/include/multiboot.h	/^    uint32_t flags;$/;"	m	struct:multiboot
flush_tlb	kernel/arch/i386/page.asm	/^flush_tlb:$/;"	l
frames	kernel/arch/i386/pmm.c	/^uint32_t *frames;$/;"	v
free_frame	kernel/arch/i386/pmm.c	/^void free_frame(uint32_t addr)$/;"	f
fs	kernel/arch/i386/include/gdt.h	/^	uint32_t fs;         \/\/ The value to load into FS when we change to kernel mode.$/;"	m	struct:tss_entry_struct
fs	sysroot/usr/include/gdt.h	/^	uint32_t fs;         \/\/ The value to load into FS when we change to kernel mode.$/;"	m	struct:tss_entry_struct
g_regs	kernel/include/system.h	/^typedef struct g_regs$/;"	s
g_regs	sysroot/usr/include/system.h	/^typedef struct g_regs$/;"	s
g_regs_t	kernel/include/system.h	/^} g_regs_t; \/\/ general registers for system calls$/;"	t	typeref:struct:g_regs
g_regs_t	sysroot/usr/include/system.h	/^} g_regs_t; \/\/ general registers for system calls$/;"	t	typeref:struct:g_regs
gdt_entries	kernel/arch/i386/include/gdt.h	/^gdt_entry_t gdt_entries[5];$/;"	v
gdt_entries	sysroot/usr/include/gdt.h	/^gdt_entry_t gdt_entries[5];$/;"	v
gdt_entry_struct	kernel/arch/i386/include/gdt.h	/^struct gdt_entry_struct$/;"	s
gdt_entry_struct	sysroot/usr/include/gdt.h	/^struct gdt_entry_struct$/;"	s
gdt_entry_t	kernel/arch/i386/include/gdt.h	/^typedef struct gdt_entry_struct gdt_entry_t;$/;"	t	typeref:struct:gdt_entry_struct
gdt_entry_t	sysroot/usr/include/gdt.h	/^typedef struct gdt_entry_struct gdt_entry_t;$/;"	t	typeref:struct:gdt_entry_struct
gdt_flush	kernel/arch/i386/descriptor_tables.asm	/^gdt_flush:$/;"	l
gdt_ptr	kernel/arch/i386/include/gdt.h	/^gdt_ptr_t   gdt_ptr;$/;"	v
gdt_ptr	sysroot/usr/include/gdt.h	/^gdt_ptr_t   gdt_ptr;$/;"	v
gdt_ptr_struct	kernel/arch/i386/include/gdt.h	/^struct gdt_ptr_struct$/;"	s
gdt_ptr_struct	sysroot/usr/include/gdt.h	/^struct gdt_ptr_struct$/;"	s
gdt_ptr_t	kernel/arch/i386/include/gdt.h	/^typedef struct gdt_ptr_struct gdt_ptr_t;$/;"	t	typeref:struct:gdt_ptr_struct
gdt_ptr_t	sysroot/usr/include/gdt.h	/^typedef struct gdt_ptr_struct gdt_ptr_t;$/;"	t	typeref:struct:gdt_ptr_struct
gdt_set_gate	kernel/arch/i386/gdt.c	/^void gdt_set_gate(int32_t num, uint32_t base, uint32_t limit, uint8_t access, uint8_t gran)$/;"	f
getID	kernel/init/kernel_class.cpp	/^int KernelClass::getID()$/;"	f	class:KernelClass
getVersion	kernel/init/kernel_class.cpp	/^char *KernelClass::getVersion()$/;"	f	class:KernelClass
get_tick	kernel/arch/i386/pit.c	/^int get_tick()$/;"	f
getch	libc/stdio/getch.c	/^int getch()$/;"	f
getchar	libc/stdio/getchar.c	/^int getchar()$/;"	f
gets	libc/stdio/gets.c	/^char *gets(char *str)$/;"	f
global	kernel/arch/i386/boot/boot.asm	/^global _start$/;"	l
global	kernel/arch/i386/boot/boot.asm	/^global stack_bottom$/;"	l
global	kernel/arch/i386/boot/boot.asm	/^global stack_top$/;"	l
granularity	kernel/arch/i386/include/gdt.h	/^	uint8_t granularity;$/;"	m	struct:gdt_entry_struct
granularity	sysroot/usr/include/gdt.h	/^	uint8_t granularity;$/;"	m	struct:gdt_entry_struct
gs	kernel/arch/i386/include/gdt.h	/^	uint32_t gs;         \/\/ The value to load into GS when we change to kernel mode.$/;"	m	struct:tss_entry_struct
gs	sysroot/usr/include/gdt.h	/^	uint32_t gs;         \/\/ The value to load into GS when we change to kernel mode.$/;"	m	struct:tss_entry_struct
header	kernel/include/kheap.h	/^typedef struct header$/;"	s
header	sysroot/usr/include/kheap.h	/^typedef struct header$/;"	s
header_t	kernel/include/kheap.h	/^} header_t;$/;"	t	typeref:struct:header
header_t	sysroot/usr/include/kheap.h	/^} header_t;$/;"	t	typeref:struct:header
hlt	kernel/include/system.h	16;"	d
hlt	sysroot/usr/include/system.h	16;"	d
hours	kernel/include/time.h	/^int hours;$/;"	v
hours	sysroot/usr/include/time.h	/^int hours;$/;"	v
idt_entries	kernel/arch/i386/include/idt.h	/^idt_entry_t idt_entries[256];$/;"	v
idt_entries	sysroot/usr/include/idt.h	/^idt_entry_t idt_entries[256];$/;"	v
idt_entry_struct	kernel/arch/i386/include/idt.h	/^struct idt_entry_struct$/;"	s
idt_entry_struct	sysroot/usr/include/idt.h	/^struct idt_entry_struct$/;"	s
idt_entry_t	kernel/arch/i386/include/idt.h	/^typedef struct idt_entry_struct idt_entry_t;$/;"	t	typeref:struct:idt_entry_struct
idt_entry_t	sysroot/usr/include/idt.h	/^typedef struct idt_entry_struct idt_entry_t;$/;"	t	typeref:struct:idt_entry_struct
idt_flush	kernel/arch/i386/descriptor_tables.asm	/^idt_flush:$/;"	l
idt_ptr	kernel/arch/i386/include/idt.h	/^idt_ptr_t   idt_ptr; $/;"	v
idt_ptr	sysroot/usr/include/idt.h	/^idt_ptr_t   idt_ptr; $/;"	v
idt_ptr_struct	kernel/arch/i386/include/idt.h	/^struct idt_ptr_struct$/;"	s
idt_ptr_struct	sysroot/usr/include/idt.h	/^struct idt_ptr_struct$/;"	s
idt_ptr_t	kernel/arch/i386/include/idt.h	/^typedef struct idt_ptr_struct idt_ptr_t;$/;"	t	typeref:struct:idt_ptr_struct
idt_ptr_t	sysroot/usr/include/idt.h	/^typedef struct idt_ptr_struct idt_ptr_t;$/;"	t	typeref:struct:idt_ptr_struct
idt_set_gate	kernel/arch/i386/idt.c	/^void idt_set_gate(uint8_t num, uint32_t base, uint16_t sel, uint8_t flags)$/;"	f
in_size	libc/include/stdio.h	/^volatile int in_size;$/;"	v
in_size	sysroot/usr/include/stdio.h	/^volatile int in_size;$/;"	v
inb	kernel/drivers/io.c	/^uint8_t inb(uint32_t ad)$/;"	f
inbuffer	kernel/include/init.h	/^uint8_t *inbuffer;$/;"	v
inbuffer	sysroot/usr/include/init.h	/^uint8_t *inbuffer;$/;"	v
init	kernel/init/init.c	/^void init(multiboot *mboot_ptr, uint32_t init_stack) {$/;"	f
init_esp	kernel/system/system.c	/^uint32_t init_esp;$/;"	v
init_gdt	kernel/arch/i386/gdt.c	/^void init_gdt()$/;"	f
init_heap	kernel/system/kheap.c	/^void init_heap ()$/;"	f
init_idt	kernel/arch/i386/idt.c	/^void init_idt()$/;"	f
init_irq	kernel/arch/i386/handlers.c	/^void init_irq()$/;"	f
init_isr	kernel/arch/i386/handlers.c	/^void init_isr()$/;"	f
init_pmm	kernel/arch/i386/pmm.c	/^void init_pmm(uint32_t mem_size)$/;"	f
init_stdio	kernel/init/init.c	/^void init_stdio() {$/;"	f
init_tasking	kernel/system/task.c	/^void init_tasking()$/;"	f
init_time	kernel/system/time.c	/^void init_time()$/;"	f
init_timer	kernel/arch/i386/pit.c	/^void init_timer(uint32_t frequency)$/;"	f
init_usermode	kernel/system/task.c	/^void init_usermode() {$/;"	f
init_vga	kernel/drivers/vga.c	/^void init_vga()$/;"	f
init_vmm	kernel/arch/i386/vmm.c	/^void init_vmm()$/;"	f
inl	kernel/drivers/io.c	/^uint32_t inl(uint32_t ad)$/;"	f
insert_list	libc/phapi/list.c	/^void insert_list(type_t item, list_t *array)$/;"	f
install_keyboard	kernel/drivers/keyboard.c	/^void install_keyboard()$/;"	f
int_no	kernel/include/system.h	/^    uint32_t int_no, err_code;    \/\/ Interrupt number and error code (if applicable)$/;"	m	struct:registers
int_no	sysroot/usr/include/system.h	/^    uint32_t int_no, err_code;    \/\/ Interrupt number and error code (if applicable)$/;"	m	struct:registers
interrupt_handlers	kernel/arch/i386/handlers.c	/^isr_t interrupt_handlers[256];$/;"	v
intlen	libc/stdlib/intlen.c	/^int intlen(int n, int base)$/;"	f
inw	kernel/drivers/io.c	/^uint16_t inw(uint32_t ad)$/;"	f
iomap_base	kernel/arch/i386/include/gdt.h	/^	uint16_t iomap_base;$/;"	m	struct:tss_entry_struct
iomap_base	sysroot/usr/include/gdt.h	/^	uint16_t iomap_base;$/;"	m	struct:tss_entry_struct
irq_common_stub	kernel/arch/i386/interrupt.asm	/^irq_common_stub:$/;"	l
irq_handler	kernel/arch/i386/handlers.c	/^void irq_handler(registers_t regs)$/;"	f
isr_common_stub	kernel/arch/i386/interrupt.asm	/^isr_common_stub:$/;"	l
isr_handler	kernel/arch/i386/handlers.c	/^void isr_handler(registers_t regs)$/;"	f
isr_t	kernel/include/system.h	/^typedef void (*isr_t)(registers_t*);$/;"	t
isr_t	sysroot/usr/include/system.h	/^typedef void (*isr_t)(registers_t*);$/;"	t
itoa	libc/stdlib/itoa.c	/^void itoa(char *buf, unsigned long int n, int base)$/;"	f
kb_buffer	kernel/include/keyboard.h	/^uint8_t kb_buffer[KEYBOARD_BUFFER_SIZE];$/;"	v
kb_buffer	sysroot/usr/include/keyboard.h	/^uint8_t kb_buffer[KEYBOARD_BUFFER_SIZE];$/;"	v
keep_running	kernel/include/system.h	17;"	d
keep_running	sysroot/usr/include/system.h	17;"	d
keyboard_handler	kernel/include/keyboard.h	/^void (*keyboard_handler)(uint8_t *buf, uint16_t size);                                         $/;"	v
keyboard_handler	sysroot/usr/include/keyboard.h	/^void (*keyboard_handler)(uint8_t *buf, uint16_t size);                                         $/;"	v
keyboard_interrupt_handler	kernel/drivers/keyboard.c	/^void keyboard_interrupt_handler(__attribute__ ((unused)) registers_t *regs)$/;"	f
keyboard_set_handler	kernel/drivers/keyboard.c	/^void keyboard_set_handler(void (*callback)(uint8_t *buf, uint16_t size))$/;"	f
kfree	kernel/system/kheap.c	/^void kfree (void *p)$/;"	f
kmain	kernel/init/main.cpp	/^void kmain(multiboot *mboot_ptr, uint32_t init_stack) {$/;"	f
kmalloc	kernel/system/kheap.c	/^void *kmalloc (uint32_t p)$/;"	f
last	kernel/include/keyboard.h	/^int last;$/;"	v
last	sysroot/usr/include/keyboard.h	/^int last;$/;"	v
ldt	kernel/arch/i386/include/gdt.h	/^	uint32_t ldt;        \/\/ Unused...$/;"	m	struct:tss_entry_struct
ldt	sysroot/usr/include/gdt.h	/^	uint32_t ldt;        \/\/ Unused...$/;"	m	struct:tss_entry_struct
length	kernel/include/kheap.h	/^    uint32_t length : 31;$/;"	m	struct:header
length	sysroot/usr/include/kheap.h	/^    uint32_t length : 31;$/;"	m	struct:header
lessthan	libc/include/list.h	/^	lessthan_pred_t lessthan;$/;"	m	struct:__anon1
lessthan	sysroot/usr/include/list.h	/^	lessthan_pred_t lessthan;$/;"	m	struct:__anon2
lessthan_pred_t	libc/include/list.h	/^typedef int8_t (*lessthan_pred_t)(type_t, type_t);$/;"	t
lessthan_pred_t	sysroot/usr/include/list.h	/^typedef int8_t (*lessthan_pred_t)(type_t, type_t);$/;"	t
lim	kernel/arch/i386/include/gdt.h	/^	uint16_t lim;$/;"	m	struct:gdt_ptr_struct
lim	sysroot/usr/include/gdt.h	/^	uint16_t lim;$/;"	m	struct:gdt_ptr_struct
lim_low	kernel/arch/i386/include/gdt.h	/^	uint16_t lim_low;$/;"	m	struct:gdt_entry_struct
lim_low	sysroot/usr/include/gdt.h	/^	uint16_t lim_low;$/;"	m	struct:gdt_entry_struct
limit	kernel/arch/i386/include/idt.h	/^    uint16_t limit;$/;"	m	struct:idt_ptr_struct
limit	sysroot/usr/include/idt.h	/^    uint16_t limit;$/;"	m	struct:idt_ptr_struct
list_t	libc/include/list.h	/^} list_t;$/;"	t	typeref:struct:__anon1
list_t	sysroot/usr/include/list.h	/^} list_t;$/;"	t	typeref:struct:__anon2
login	kernel/init/init.c	/^void login() {$/;"	f
lookup_list	libc/phapi/list.c	/^type_t lookup_list(uint32_t i, list_t *array)$/;"	f
machine	kernel/system/system.c	/^char machine[30];$/;"	v
make_color	kernel/drivers/vga.c	/^uint8_t make_color(enum vga_color fg, enum vga_color bg)$/;"	f
make_vgaentry	kernel/drivers/vga.c	/^uint16_t make_vgaentry(char c, uint8_t color)$/;"	f
max_size	libc/include/list.h	/^	uint32_t max_size;$/;"	m	struct:__anon1
max_size	sysroot/usr/include/list.h	/^	uint32_t max_size;$/;"	m	struct:__anon2
mem_lower	kernel/include/multiboot.h	/^    uint32_t mem_lower;$/;"	m	struct:multiboot
mem_lower	sysroot/usr/include/multiboot.h	/^    uint32_t mem_lower;$/;"	m	struct:multiboot
mem_upper	kernel/include/multiboot.h	/^    uint32_t mem_upper;$/;"	m	struct:multiboot
mem_upper	sysroot/usr/include/multiboot.h	/^    uint32_t mem_upper;$/;"	m	struct:multiboot
memcmp	libc/string/memcmp.c	/^int memcmp(const void* aptr, const void* bptr, size_t size)$/;"	f
memcpy	libc/string/memcpy.c	/^void* memcpy(void* dstptr, const void* srcptr, size_t size)$/;"	f
memmove	libc/string/memmove.c	/^void* memmove(void* dstptr, const void* srcptr, size_t size)$/;"	f
memset	libc/string/memset.c	/^void* memset(void* bufptr, int value, size_t size)$/;"	f
memsetw	libc/string/memsetw.c	/^void *memsetw(void *s, int c, size_t n)$/;"	f
minutes	kernel/include/time.h	/^int minutes;$/;"	v
minutes	sysroot/usr/include/time.h	/^int minutes;$/;"	v
mmap_addr	kernel/include/multiboot.h	/^    uint32_t mmap_addr;$/;"	m	struct:multiboot
mmap_addr	sysroot/usr/include/multiboot.h	/^    uint32_t mmap_addr;$/;"	m	struct:multiboot
mmap_length	kernel/include/multiboot.h	/^    uint32_t mmap_length;$/;"	m	struct:multiboot
mmap_length	sysroot/usr/include/multiboot.h	/^    uint32_t mmap_length;$/;"	m	struct:multiboot
mods_addr	kernel/include/multiboot.h	/^    uint32_t mods_addr;$/;"	m	struct:multiboot
mods_addr	sysroot/usr/include/multiboot.h	/^    uint32_t mods_addr;$/;"	m	struct:multiboot
mods_count	kernel/include/multiboot.h	/^    uint32_t mods_count;$/;"	m	struct:multiboot
mods_count	sysroot/usr/include/multiboot.h	/^    uint32_t mods_count;$/;"	m	struct:multiboot
mseconds	kernel/include/time.h	/^int mseconds;$/;"	v
mseconds	sysroot/usr/include/time.h	/^int mseconds;$/;"	v
multiboot	kernel/include/multiboot.h	/^typedef struct multiboot$/;"	s
multiboot	kernel/include/multiboot.h	/^} multiboot;$/;"	t	typeref:struct:multiboot
multiboot	sysroot/usr/include/multiboot.h	/^typedef struct multiboot$/;"	s
multiboot	sysroot/usr/include/multiboot.h	/^} multiboot;$/;"	t	typeref:struct:multiboot
next	kernel/include/kheap.h	/^    struct header *prev, *next;$/;"	m	struct:header	typeref:struct:header::
next	kernel/include/task.h	/^    struct task *next;$/;"	m	struct:task	typeref:struct:task::task
next	sysroot/usr/include/kheap.h	/^    struct header *prev, *next;$/;"	m	struct:header	typeref:struct:header::
next	sysroot/usr/include/task.h	/^    struct task *next;$/;"	m	struct:task	typeref:struct:task::task
nframes	kernel/arch/i386/pmm.c	/^uint32_t nframes;$/;"	v
num	kernel/include/multiboot.h	/^    uint32_t num;$/;"	m	struct:multiboot
num	sysroot/usr/include/multiboot.h	/^    uint32_t num;$/;"	m	struct:multiboot
num_syscalls	kernel/system/task.c	/^int num_syscalls = 1;$/;"	v
obj_ptr	kernel/include/icxxabi.h	/^    void *obj_ptr;$/;"	m	struct:atexit_func_entry_t
obj_ptr	sysroot/usr/include/icxxabi.h	/^    void *obj_ptr;$/;"	m	struct:atexit_func_entry_t
out_crs	libc/include/stdio.h	/^int out_crs;$/;"	v
out_crs	sysroot/usr/include/stdio.h	/^int out_crs;$/;"	v
outb	kernel/drivers/io.c	/^void outb(uint32_t ad, uint8_t v)$/;"	f
outbuffer	kernel/include/init.h	/^char *outbuffer;$/;"	v
outbuffer	sysroot/usr/include/init.h	/^char *outbuffer;$/;"	v
outl	kernel/drivers/io.c	/^void outl(uint32_t ad, uint32_t v)$/;"	f
outw	kernel/drivers/io.c	/^void outw(uint32_t ad, uint16_t v)$/;"	f
paging_enabled	kernel/arch/i386/pmm.c	/^int paging_enabled = 0;$/;"	v
panic	kernel/system/system.c	/^void panic(const char *msg, int line, char *file)$/;"	f
pid	kernel/include/task.h	/^    uint32_t pid;$/;"	m	struct:task
pid	kernel/include/task.h	/^uint32_t pid;$/;"	v
pid	sysroot/usr/include/task.h	/^    uint32_t pid;$/;"	m	struct:task
pid	sysroot/usr/include/task.h	/^uint32_t pid;$/;"	v
place_list	libc/phapi/list.c	/^list_t place_list(void *addr, uint32_t max_size, lessthan_pred_t lessthan)$/;"	f
placement_addr	kernel/arch/i386/pmm.c	/^uint32_t placement_addr = (uint32_t) &kernel_end;$/;"	v
preempt	kernel/system/task.c	/^void preempt()$/;"	f
prev	kernel/include/kheap.h	/^    struct header *prev, *next;$/;"	m	struct:header	typeref:struct:header::header
prev	sysroot/usr/include/kheap.h	/^    struct header *prev, *next;$/;"	m	struct:header	typeref:struct:header::header
prev_tss	kernel/arch/i386/include/gdt.h	/^	uint32_t prev_tss;   \/\/ The previous TSS - if we used hardware task switching this would form a linked list.$/;"	m	struct:tss_entry_struct
prev_tss	sysroot/usr/include/gdt.h	/^	uint32_t prev_tss;   \/\/ The previous TSS - if we used hardware task switching this would form a linked list.$/;"	m	struct:tss_entry_struct
print_regs	kernel/drivers/io.c	/^void print_regs(registers_t *regs)$/;"	f
print_time	kernel/system/time.c	/^void print_time()$/;"	f
printf	libc/stdio/printf.c	/^int printf(const char* restrict format, ...)$/;"	f
printk	kernel/drivers/io.c	/^int printk(const char* format, ...)$/;"	f
printregs	kernel/system/cpu.c	/^void printregs(int eax, int ebx, int ecx, int edx) {$/;"	f
prompt	kernel/system/system.c	/^void prompt() {$/;"	f
putchar	libc/stdio/putchar.c	/^void putchar(char c)$/;"	f
puts	libc/stdio/puts.c	/^int puts(const char* string)$/;"	f
read_cr0	kernel/arch/i386/page.asm	/^read_cr0:$/;"	l
read_cr3	kernel/arch/i386/page.asm	/^read_cr3:$/;"	l
read_eip	kernel/arch/i386/descriptor_tables.asm	/^read_eip:$/;"	l
read_kb_buff	kernel/drivers/keyboard.c	/^void read_kb_buff(uint8_t *buf, uint16_t size) $/;"	f
reboot	kernel/system/system.c	/^void reboot()$/;"	f
register_interrupt_handler	kernel/arch/i386/handlers.c	/^void register_interrupt_handler(uint8_t n, isr_t handler)$/;"	f
registers	kernel/include/system.h	/^typedef struct registers$/;"	s
registers	sysroot/usr/include/system.h	/^typedef struct registers$/;"	s
registers_t	kernel/include/system.h	/^} registers_t; \/\/ registers for interrupts$/;"	t	typeref:struct:registers
registers_t	sysroot/usr/include/system.h	/^} registers_t; \/\/ registers for interrupts$/;"	t	typeref:struct:registers
regs	kernel/include/task.h	/^    t_regs_t regs;$/;"	m	struct:task
regs	sysroot/usr/include/task.h	/^    t_regs_t regs;$/;"	m	struct:task
remove_list	libc/phapi/list.c	/^void remove_list(uint32_t i, list_t *array)$/;"	f
row	kernel/drivers/vga.c	/^size_t row;$/;"	v
seconds	kernel/include/time.h	/^int seconds;$/;"	v
seconds	sysroot/usr/include/time.h	/^int seconds;$/;"	v
section	kernel/arch/i386/boot/boot.asm	/^section .bootstrap_stack$/;"	l
section	kernel/arch/i386/boot/boot.asm	/^section .multiboot$/;"	l
section	kernel/arch/i386/boot/boot.asm	/^section .text$/;"	l
sel	kernel/arch/i386/include/idt.h	/^    uint16_t sel;               $/;"	m	struct:idt_entry_struct
sel	sysroot/usr/include/idt.h	/^    uint16_t sel;               $/;"	m	struct:idt_entry_struct
setID	kernel/init/kernel_class.cpp	/^void KernelClass::setID(const int ID)$/;"	f	class:KernelClass
setVersion	kernel/init/kernel_class.cpp	/^void KernelClass::setVersion(const char *version)$/;"	f	class:KernelClass
set_kernel_stack	kernel/arch/i386/gdt.c	/^void set_kernel_stack(uint32_t stack)$/;"	f
shell	kernel/system/system.c	/^void shell(char *str) {$/;"	f
shift	kernel/include/keyboard.h	/^int shift;$/;"	v
shift	sysroot/usr/include/keyboard.h	/^int shift;$/;"	v
shndx	kernel/include/multiboot.h	/^    uint32_t shndx;$/;"	m	struct:multiboot
shndx	sysroot/usr/include/multiboot.h	/^    uint32_t shndx;$/;"	m	struct:multiboot
size	kernel/include/multiboot.h	/^    uint32_t size;$/;"	m	struct:multiboot
size	libc/include/list.h	/^	uint32_t size;$/;"	m	struct:__anon1
size	sysroot/usr/include/list.h	/^	uint32_t size;$/;"	m	struct:__anon2
size	sysroot/usr/include/multiboot.h	/^    uint32_t size;$/;"	m	struct:multiboot
ss	kernel/arch/i386/include/gdt.h	/^	uint32_t ss;         \/\/ The value to load into SS when we change to kernel mode.$/;"	m	struct:tss_entry_struct
ss	kernel/include/system.h	/^    uint32_t eip, cs, eflags, useresp, ss; \/\/ Pushed by the processor automatically.$/;"	m	struct:registers
ss	sysroot/usr/include/gdt.h	/^	uint32_t ss;         \/\/ The value to load into SS when we change to kernel mode.$/;"	m	struct:tss_entry_struct
ss	sysroot/usr/include/system.h	/^    uint32_t eip, cs, eflags, useresp, ss; \/\/ Pushed by the processor automatically.$/;"	m	struct:registers
ss0	kernel/arch/i386/include/gdt.h	/^	uint32_t ss0;        \/\/ The stack segment to load when we change to kernel mode.$/;"	m	struct:tss_entry_struct
ss0	sysroot/usr/include/gdt.h	/^	uint32_t ss0;        \/\/ The stack segment to load when we change to kernel mode.$/;"	m	struct:tss_entry_struct
ss1	kernel/arch/i386/include/gdt.h	/^	uint32_t ss1;$/;"	m	struct:tss_entry_struct
ss1	sysroot/usr/include/gdt.h	/^	uint32_t ss1;$/;"	m	struct:tss_entry_struct
ss2	kernel/arch/i386/include/gdt.h	/^	uint32_t ss2;$/;"	m	struct:tss_entry_struct
ss2	sysroot/usr/include/gdt.h	/^	uint32_t ss2;$/;"	m	struct:tss_entry_struct
stack_bottom	kernel/arch/i386/boot/boot.asm	/^stack_bottom:$/;"	l
stack_top	kernel/arch/i386/boot/boot.asm	/^stack_top:$/;"	l
start_task	kernel/include/task.h	/^task_t *start_task;$/;"	v
start_task	sysroot/usr/include/task.h	/^task_t *start_task;$/;"	v
std_lessthan_pred	libc/phapi/list.c	/^int8_t std_lessthan_pred(type_t a, type_t b)$/;"	f
stdin	libc/include/stdio.h	/^void* stdin;$/;"	v
stdin	sysroot/usr/include/stdio.h	/^void* stdin;$/;"	v
stdout	libc/include/stdio.h	/^void* stdout;$/;"	v
stdout	sysroot/usr/include/stdio.h	/^void* stdout;$/;"	v
sti	kernel/include/system.h	14;"	d
sti	sysroot/usr/include/system.h	14;"	d
strcmp	libc/string/strcmp.c	/^int strcmp(const char *s1, const char *s2)$/;"	f
strlen	libc/string/strlen.c	/^size_t strlen(const char* string)$/;"	f
strrev	libc/string/strrev.c	/^char *strrev(char *str)$/;"	f
switch_task	kernel/system/task.c	/^void switch_task()$/;"	f
syscall_handler	kernel/system/task.c	/^void syscall_handler(registers_t *regs)$/;"	f
syscalls	kernel/system/task.c	/^void *syscalls[] = {$/;"	v
t_regs	kernel/include/system.h	/^typedef struct t_regs {$/;"	s
t_regs	sysroot/usr/include/system.h	/^typedef struct t_regs {$/;"	s
t_regs_t	kernel/include/system.h	/^} t_regs_t; \/\/ task registers$/;"	t	typeref:struct:t_regs
t_regs_t	sysroot/usr/include/system.h	/^} t_regs_t; \/\/ task registers$/;"	t	typeref:struct:t_regs
tabstop	kernel/drivers/vga.c	/^int tabstop;$/;"	v
task	kernel/include/task.h	/^typedef struct task {$/;"	s
task	sysroot/usr/include/task.h	/^typedef struct task {$/;"	s
task_t	kernel/include/task.h	/^} task_t;$/;"	t	typeref:struct:task
task_t	sysroot/usr/include/task.h	/^} task_t;$/;"	t	typeref:struct:task
testing_shell	kernel/system/system.c	/^static void testing_shell(char *str) $/;"	f	file:
tick	kernel/arch/i386/pit.c	/^int tick;$/;"	v
timer_callback	kernel/arch/i386/pit.c	/^void timer_callback(__attribute__ ((unused)) registers_t *regs)$/;"	f
trap	kernel/arch/i386/include/gdt.h	/^	uint16_t trap;$/;"	m	struct:tss_entry_struct
trap	sysroot/usr/include/gdt.h	/^	uint16_t trap;$/;"	m	struct:tss_entry_struct
tss_entry	kernel/arch/i386/include/gdt.h	/^tss_entry_t tss_entry;$/;"	v
tss_entry	sysroot/usr/include/gdt.h	/^tss_entry_t tss_entry;$/;"	v
tss_entry_struct	kernel/arch/i386/include/gdt.h	/^struct tss_entry_struct$/;"	s
tss_entry_struct	sysroot/usr/include/gdt.h	/^struct tss_entry_struct$/;"	s
tss_entry_t	kernel/arch/i386/include/gdt.h	/^typedef struct tss_entry_struct tss_entry_t; $/;"	t	typeref:struct:tss_entry_struct
tss_entry_t	sysroot/usr/include/gdt.h	/^typedef struct tss_entry_struct tss_entry_t; $/;"	t	typeref:struct:tss_entry_struct
tss_flush	kernel/arch/i386/descriptor_tables.asm	/^tss_flush:$/;"	l
type_t	kernel/include/system.h	/^typedef void* type_t;$/;"	t
type_t	sysroot/usr/include/system.h	/^typedef void* type_t;$/;"	t
uarch_t	kernel/include/icxxabi.h	/^typedef unsigned uarch_t;$/;"	t
uarch_t	sysroot/usr/include/icxxabi.h	/^typedef unsigned uarch_t;$/;"	t
unhandled_interrupt	kernel/arch/i386/idt.c	/^static void unhandled_interrupt(__attribute__((unused)) registers_t *regs)$/;"	f	file:
update_time	kernel/system/time.c	/^void update_time()$/;"	f
use_frame	kernel/arch/i386/pmm.c	/^void use_frame(uint32_t addr)$/;"	f
user	kernel/system/system.c	/^char user[20];$/;"	v
useresp	kernel/include/system.h	/^    uint32_t eip, cs, eflags, useresp, ss; \/\/ Pushed by the processor automatically.$/;"	m	struct:registers
useresp	sysroot/usr/include/system.h	/^    uint32_t eip, cs, eflags, useresp, ss; \/\/ Pushed by the processor automatically.$/;"	m	struct:registers
vbe_control_info	kernel/include/multiboot.h	/^    uint32_t vbe_control_info;$/;"	m	struct:multiboot
vbe_control_info	sysroot/usr/include/multiboot.h	/^    uint32_t vbe_control_info;$/;"	m	struct:multiboot
vbe_interface_len	kernel/include/multiboot.h	/^    uint32_t vbe_interface_len;$/;"	m	struct:multiboot
vbe_interface_len	sysroot/usr/include/multiboot.h	/^    uint32_t vbe_interface_len;$/;"	m	struct:multiboot
vbe_interface_off	kernel/include/multiboot.h	/^    uint32_t vbe_interface_off;$/;"	m	struct:multiboot
vbe_interface_off	sysroot/usr/include/multiboot.h	/^    uint32_t vbe_interface_off;$/;"	m	struct:multiboot
vbe_interface_seg	kernel/include/multiboot.h	/^    uint32_t vbe_interface_seg;$/;"	m	struct:multiboot
vbe_interface_seg	sysroot/usr/include/multiboot.h	/^    uint32_t vbe_interface_seg;$/;"	m	struct:multiboot
vbe_mode	kernel/include/multiboot.h	/^    uint32_t vbe_mode;$/;"	m	struct:multiboot
vbe_mode	sysroot/usr/include/multiboot.h	/^    uint32_t vbe_mode;$/;"	m	struct:multiboot
vbe_mode_info	kernel/include/multiboot.h	/^    uint32_t vbe_mode_info;$/;"	m	struct:multiboot
vbe_mode_info	sysroot/usr/include/multiboot.h	/^    uint32_t vbe_mode_info;$/;"	m	struct:multiboot
version	kernel/include/kernel_class.h	/^        char version[30];$/;"	m	class:KernelClass
version	sysroot/usr/include/kernel_class.h	/^        char version[30];$/;"	m	class:KernelClass
version_name	kernel/include/kernel_class.h	/^        char version_name[50];$/;"	m	class:KernelClass
version_name	sysroot/usr/include/kernel_class.h	/^        char version_name[50];$/;"	m	class:KernelClass
vga_color	kernel/include/vga.h	/^enum vga_color$/;"	g
vga_color	sysroot/usr/include/vga.h	/^enum vga_color$/;"	g
vga_memory	kernel/drivers/vga.c	/^uint16_t *vga_memory;$/;"	v
vga_move_cursor	kernel/drivers/vga.c	/^void vga_move_cursor(int row, int column)$/;"	f
vga_putchar	kernel/drivers/vga.c	/^void vga_putchar(char c)$/;"	f
vga_putchar_color	kernel/drivers/vga.c	/^void vga_putchar_color(char c, enum vga_color fg)$/;"	f
vga_putentryat	kernel/drivers/vga.c	/^void vga_putentryat(char c, uint8_t color, size_t x, size_t y)$/;"	f
vga_scroll	kernel/drivers/vga.c	/^int vga_scroll(size_t *row)$/;"	f
vga_set_tab	kernel/drivers/vga.c	/^void vga_set_tab(int size)$/;"	f
vga_setcolor	kernel/drivers/vga.c	/^void vga_setcolor(enum vga_color fg, enum vga_color bg)$/;"	f
vga_writestring	kernel/drivers/vga.c	/^void vga_writestring(const char* data)$/;"	f
welcome	kernel/init/init.c	/^void welcome() {$/;"	f
write	kernel/drivers/io.c	/^int write(const char *buf, size_t len)$/;"	f
write_char	kernel/drivers/io.c	/^int write_char(const char c)$/;"	f
write_cr0	kernel/arch/i386/page.asm	/^write_cr0:$/;"	l
write_cr3	kernel/arch/i386/page.asm	/^write_cr3:$/;"	l
write_tss	kernel/arch/i386/gdt.c	/^void write_tss(int32_t num, uint16_t ss0, uint32_t esp0)$/;"	f
wstr_color	kernel/drivers/vga.c	/^void wstr_color(const char* data, enum vga_color fg)$/;"	f
zero_division_handler	kernel/arch/i386/handlers.c	/^static void zero_division_handler(__attribute__((unused)) registers_t *regs)$/;"	f	file:
~KernelClass	kernel/init/kernel_class.cpp	/^KernelClass::~KernelClass()$/;"	f	class:KernelClass
